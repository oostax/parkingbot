generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model favorites {
  id         Int      @id @default(autoincrement())
  user_id    String
  parking_id String
  timestamp  DateTime @default(now())

  @@unique([user_id, parking_id])
}

model parking_stats {
  id           Int      @id @default(autoincrement())
  parking_id   String
  timestamp    DateTime
  free_spaces  Int
  total_spaces Int
}

model hourly_parking_data {
  id           Int      @id @default(autoincrement())
  parking_id   String
  hour         Int
  free_spaces  Int
  total_spaces Int
  date_updated DateTime

  @@unique([parking_id, hour])
}

model User {
  id           String             @id
  username     String?
  firstName    String?
  lastName     String?
  createdAt    DateTime           @default(now())
  updatedAt    DateTime           @updatedAt
  email        String?            @unique
  image        String?
  telegramId   String?
  achievements Achievement[]
  transactions TokenTransaction[]
  districts    UserDistrict[]
  userProfile  UserProfile?

  @@map("User")
}

model UserProfile {
  id                   String   @id @default(cuid())
  userId               String   @unique
  tokenBalance         Int      @default(0)
  status               String   @default("Regular")
  carModel             String?
  district             String?
  lastLoginAt          DateTime @default(now())
  totalParksVisited    Int      @default(0)
  uniqueParksVisited   Int      @default(0)
  consecutiveLoginDays Int      @default(1)
  totalTokensEarned    Int      @default(0)
  totalTokensSpent     Int      @default(0)
  referralsCount       Int      @default(0)
  challengesCompleted  Int      @default(0)
  user                 User     @relation(fields: [userId], references: [id])
}

model UserDistrict {
  id       String @id @default(cuid())
  userId   String
  district String
  user     User   @relation(fields: [userId], references: [id])

  @@unique([userId, district])
}

model Achievement {
  id            String    @id @default(cuid())
  userId        String
  achievementId String
  earned        Boolean   @default(false)
  earnedAt      DateTime?
  user          User      @relation(fields: [userId], references: [id])

  @@unique([userId, achievementId])
}

model TokenTransaction {
  id          String   @id @default(cuid())
  userId      String
  amount      Int
  type        String
  description String
  createdAt   DateTime @default(now())
  user        User     @relation(fields: [userId], references: [id])
}

model Challenge {
  id          String                @id @default(cuid())
  title       String
  description String
  reward      Int
  startDate   DateTime
  endDate     DateTime
  isActive    Boolean               @default(true)
  type        String
  requirement Int
  completions ChallengeCompletion[]
}

model ChallengeCompletion {
  id          String    @id @default(cuid())
  challengeId String
  userId      String
  completedAt DateTime  @default(now())
  challenge   Challenge @relation(fields: [challengeId], references: [id])

  @@unique([challengeId, userId])
}

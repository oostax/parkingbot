generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model favorites {
  id         Int     @id @default(autoincrement())
  user_id    String
  parking_id String
  timestamp  String? @default("CURRENT_TIMESTAMP")

  @@unique([user_id, parking_id], map: "sqlite_autoindex_favorites_1")
}

model parking_stats {
  id           Int    @id @default(autoincrement())
  parking_id   String
  timestamp    String
  free_spaces  Int
  total_spaces Int
}

model hourly_parking_data {
  id           Int    @id @default(autoincrement())
  parking_id   String
  hour         Int
  free_spaces  Int
  total_spaces Int
  date_updated String

  @@unique([parking_id, hour], map: "sqlite_autoindex_hourly_parking_data_1")
}

model User {
  id           String             @id
  username     String?
  firstName    String?
  lastName     String?
  createdAt    String?            @default("CURRENT_TIMESTAMP")
  updatedAt    DateTime           @default(now()) @updatedAt
  email        String?            @unique(map: "sqlite_autoindex_User_2")
  image        String?
  telegramId   String?
  achievements Achievement[]
  transactions TokenTransaction[] @ignore
  districts    UserDistrict[]
  userProfile  UserProfile?

  @@map("User")
}

model UserProfile {
  id                   String  @id @default(cuid())
  userId               String? @unique(map: "sqlite_autoindex_UserProfile_2")
  tokenBalance         Int?    @default(0)
  status               String? @default("Regular")
  carModel             String?
  district             String?
  lastLoginAt          String? @default("CURRENT_TIMESTAMP")
  totalParksVisited    Int?    @default(0)
  uniqueParksVisited   Int?    @default(0)
  consecutiveLoginDays Int?    @default(1)
  totalTokensEarned    Int?    @default(0)
  totalTokensSpent     Int?    @default(0)
  referralsCount       Int?    @default(0)
  challengesCompleted  Int?    @default(0)
  user                 User?   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)
}

model UserDistrict {
  id       String @id @default(cuid())
  userId   String
  district String
  user     User   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction) @ignore

  @@unique([userId, district], map: "sqlite_autoindex_UserDistrict_2")
}

model Achievement {
  id            String @id @default(cuid())
  userId        String
  achievementId String
  earned        Int?   @default(0)
  earnedAt      String?
  user          User   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction) @ignore

  @@unique([userId, achievementId], map: "sqlite_autoindex_Achievement_2")
}

model TokenTransaction {
  id          String @id @default(cuid())
  userId      String
  amount      Int
  type        String
  description String
  createdAt   String? @default("CURRENT_TIMESTAMP")
  user        User   @relation(fields: [userId], references: [id], onDelete: NoAction, onUpdate: NoAction)

  @@ignore
}

model Challenge {
  id          String                @id @default(cuid())
  title       String
  description String
  reward      Int
  startDate   String
  endDate     String
  isActive    Int?                  @default(1)
  type        String
  requirement Int
  completions ChallengeCompletion[]

  @@ignore
}

model ChallengeCompletion {
  id          String   @id @default(cuid())
  challengeId String
  userId      String
  completedAt String?  @default("CURRENT_TIMESTAMP")
  challenge   Challenge @relation(fields: [challengeId], references: [id], onDelete: NoAction, onUpdate: NoAction) @ignore

  @@unique([challengeId, userId], map: "sqlite_autoindex_ChallengeCompletion_2")
}
